// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  user_name     String    @unique
  email         String    @unique
  password      String
  role          String    @default("customer") @db.VarChar(20)
  team_role     String?   // Only for team_member
  department    String?   // Only for team_member
  profile_image String?
  created_at    DateTime  @default(now())
  updated_at    DateTime?
  verified      Boolean   @default(false)

  // Customer relationship (one customer can have many projects)
  projects         Project[]      @relation("CustomerProjects")

  // Team member relationship (many team members can be assigned to many projects)
  assignedProjects ProjectTeamMember[]

  tasks            Task[]         @relation("AssignedTasks")
  feedbacks        Feedback[]
  payments         Payment[]
  sentMessages     Message[]      @relation("SenderMessages")
  receivedMessages Message[]      @relation("ReceiverMessages")
  notifications    Notification[]
  uploadedFiles    File[]         @relation("UserFiles")
}


model Project {
  id                     String    @id @default(uuid())
  customer_id            String
  customer_name          String?
  title                  String
  description            String
  status                 String
  pricing_tier           String
  created_at             DateTime  @default(now())
  updated_at             DateTime? @default(now())
  technical_requirements String?
  required_skills        String?
  deliverables           String?
  budget                 Float?
  payment_type           String?
  start_date             DateTime?
  duration_days          Int?
  priority               String?
  visibility             String?

  progress_percentage    Int       @default(0)
  total_tasks            Int       @default(0)
  completed_tasks        Int       @default(0)

  // Customer relationship
  customer   User        @relation("CustomerProjects", fields: [customer_id], references: [id])

  // Team members relationship
  teamMembers ProjectTeamMember[]

  tasks      Task[]
  feedbacks  Feedback[]
  iterations Iteration[]
  payments   Payment[]
  messages   Message[]
  files      File[]
}

// Join table for the many-to-many relationship between Users (team members) and Projects
model ProjectTeamMember {
  id         String   @id @default(uuid())
  project_id String
  user_id    String
  role       String?  // Role in this specific project
  joined_at  DateTime @default(now())

  // Relations
  project    Project  @relation(fields: [project_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  // Composite unique constraint to prevent duplicate assignments
  @@unique([project_id, user_id])
}

model Task {
  id          String    @id @default(uuid())
  project_id  String
  assigned_to String?
  title       String
  description String
  status      String
  task_group  String
  priority    String    @default("Medium")
  due_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  project  Project @relation(fields: [project_id], references: [id])
  assignee User?   @relation("AssignedTasks", fields: [assigned_to], references: [id])
}

model Feedback {
  id            String   @id @default(uuid())
  project_id    String
  customer_id   String
  feedback_text String
  status        String
  created_at    DateTime @default(now())

  project  Project @relation(fields: [project_id], references: [id])
  customer User    @relation(fields: [customer_id], references: [id])
}

model Iteration {
  id              String   @id @default(uuid())
  project_id      String
  iteration_count Int
  max_iterations  Int
  created_at      DateTime @default(now())

  project Project @relation(fields: [project_id], references: [id])
}

model Payment {
  id             String   @id @default(uuid())
  user_id        String
  project_id     String?
  amount         Float
  currency       String
  status         String
  payment_date   DateTime
  payment_method String?
  transaction_id String?

  user    User     @relation(fields: [user_id], references: [id])
  project Project? @relation(fields: [project_id], references: [id])
}

model Message {
  id          String   @id @default(uuid())
  sender_id   String
  receiver_id String
  project_id  String
  message     String
  created_at  DateTime @default(now())

  sender   User    @relation("SenderMessages", fields: [sender_id], references: [id])
  receiver User    @relation("ReceiverMessages", fields: [receiver_id], references: [id])
  project  Project @relation(fields: [project_id], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String
  message    String
  is_read    Boolean
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model File {
  id          String   @id @default(uuid())
  project_id  String
  uploaded_by String
  file_url    String
  file_type   String?
  file_name   String?
  file_size   Float?
  uploaded_at DateTime @default(now())

  project  Project @relation(fields: [project_id], references: [id])
  uploader User    @relation("UserFiles", fields: [uploaded_by], references: [id])
}
